var registerApp = angular.module('registerApp', ['ngRoute']);

function regConfig($routeProvider) {
    $routeProvider.
        when('/', {
            controller: registerCtrl,
            templateUrl: 'template/reg_tpl.html'}).
        when('/acknowledge', {
            controller: acknowledgeCtrl,
            templateUrl: 'template/acknowledge.html'}).
        otherwise({
            redirectTo: '/'
        });
}

registerApp.config(regConfig);

function regFormCtrl($scope, $http, $route, $location, cMgr, invalidFlags) {
    $scope.register_submitted = false;
    $scope.invalidFlags = invalidFlags;
    if ($scope.register) {
      $scope.register.cm_password.$invalid = true;
      $scope.register.confirmPassword.$invalid = true;
    }
    $scope.cm = cMgr;

    // Get the user environment
    getUserEnv($http).then(function(result) {
        $scope.cm.username = result.data;
    });

    // Get the communities and roles
    var getCommunities = $http({method:'GET', url: '${CGI_URL}/getCommunities.py'});
    getCommunities.then(function(result) {
        $scope.comm_types = result.data;
        $scope.comm_roles = result.data.roles;
    });

    $scope.currentPage = 0;

    // Add more community fields
    $scope.addMore = function() {
        $scope.cm.communities.push({name: ''});
        $scope.invalidFlags.communities.push({community: true});
    };

    // Remove community field
    $scope.removeCommunity = function(array, index) {
        array.splice(index, 1);
    };

    // Set the number of pages for the communities field
    $scope.numberOfPages = function() {
        return Math.ceil($scope.cm.communities.length/3);
    };

    // If the community selection changes we need to update our invalid
    // flag
    $scope.changeCommunity = function(index) {
        if ($scope.cm.communities[index].name) {
            $scope.invalidFlags.communities[index].community = false;
        } else {
            $scope.invalidFlags.communities[index].community = true;
        }
    };

    // Issued a submit request
    $scope.submitReq = function() {
        $scope.register_submitted = true;
    };

    // Submit the form
    $scope.submitForm = function() {
        if ($scope.register_submitted) {
          // Check the password fields are set and valid
          if ($scope.register.cm_password.$invalid ||
              $scope.register.confirmPassword.$invalid) {
                $scope.register.$invalid = true;
                $scope.register.cm_password.$isdirty = true;
                $scope.register.confirmPassword.$isdirty = true;
          }

          if (! $scope.register.$invalid) {
              $http.post('${CGI_URL}/submitProfile.py', angular.toJson($scope.cm),
                         {headers: 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8;'}).then(
                            function(result){
                                var retval = result.data.replace(/\s/g, '');
                                if (retval === 'roleExists') {
                                    alert('The user account is already registered for this role');
                                } else {
                                    // Have to reset the fields manually
                                    // as the $setPristine doesn't work
                                    //$scope.register.$setPristine();
                                    cMgr.firstname = '';
                                    cMgr.lastname = '';
                                    cMgr.email = '';
                                    cMgr.role = '';
                                    cMgr.username = '';
                                    cMgr.password = '';
                                    cMgr.communities = [{name: ''}];
                                    $scope.cm = cMgr;
                                    $location.url('/acknowledge');
                                }
                            }, function(error){
                                alert('There was a problem submitting the request.' +
                                ' Please contact the Data Policy Manager for more information');
                            });
          }
        }
    };

    $scope.comparePasswords = function() {
      var invalid = $scope.cm.password !== $scope.confirmPassword;
      $scope.register.confirmPassword.$invalid = invalid;
      $scope.register.confirmPassword.$isdirty = true;
    };

    $scope.updatePassword = function() {
      $scope.register.cm_password.$isdirty = true;
    };

    // Reset the form
    var result = '';
    $scope.resetForm = function() {
        // Get the user environment
        //getUserEnv($http).then(function(result) {
        //    $scope.cm.username = result.data;
        //});
        //$scope.cm.username = angular.copy(result.data);
        //$scope.register.$setPristine();
        window.location.reload();
    };
}
function registerCtrl($scope) {
}

function acknowledgeCtrl($scope) {
}

// Function for getting the user profile
function getProfile($http) {
    return $http({method: "GET", url: "${CGI_URL}/getProfile.py"});
}

// Function to get the user environment variable
function getUserEnv($http) {
    return $http({method: "GET", url: "${CGI_URL}/getUserEnv.py"});
}

function checkLocalStorage() {
    var test = 'test';
    try {
        localStorage.setItem(test, "test");
        localStorage.removeItem(test);
        return true;
    } catch(e) {
        return false;
    } 
}

function checkAccess($http) {
    $http({method: "GET", url: "${CGI_URL}/checkAccess.py"}).success(
                function(data, status){
                    if (status === 200){
                        if (data.connection === "successful") {
                            return true;
                        }
                    }
                }).error(function(data, status){
                    var width = 600;
                    var height = 300;
                    var leftPosition = (screen.width) ? (screen.width-width)/2 : 0;
                    var topPosition = (screen.height) ? (screen.height-height)/2 : 0;
                    var settings = "height="+height+",width="+width+
                        ",top="+topPosition+",left="+leftPosition+
                        ",scrollbars=yes,resizable";
                    window.open("${HTML_OPEN}", "Session Timedout",
                                settings);
                    if (checkLocalStorage()) {
                        localStorage.setItem("session_renew", "displayed");
                    } else {
                        console.log("Cannot write to the localstorage.");
                    }
                    console.log("error is " + status);
                    return false;
                });
}

var checkRegisterApp = angular.module("checkRegisterApp", []);

function checkRegisterCtrl($scope, $http) {
    // Make a call to the database to find if the user is registered and
    // logged in
    $http({method: "GET",
        url: "${CGI_URL}/check_register.py"}).then(function(response) {
            var data = response.data;
            window.location.href = data;
        });
}

// Factory to create a community manager object
registerApp.factory('cMgr', function() {
    var cMgr = {firstname: '', lastname: '', email: '', username: '',
                password: '', communities: [{name: ''}]};
    return cMgr;
});

function displayHelp(id) {
    var elem = document.getElementById(id);
    if (elem.style.display == 'block') {
        elem.style.display = 'none';
    } else {
        elem.style.display = 'block';
    }
}
function closeHelp(id) {
    var elem = document.getElementById(id);
    if (elem.style.display == 'block') {
        elem.style.display = 'none';
    }
}

registerApp.filter("startFrom", function() {
    return function(input, start) {
        start = +start;
        aslice = input.slice(start);
        return aslice;
    };
});

function invalidFlags() {
    var communities = [{community: true}];
    var invalids = {communities: communities};
    return invalids;
}

registerApp.factory('invalidFlags', invalidFlags);
